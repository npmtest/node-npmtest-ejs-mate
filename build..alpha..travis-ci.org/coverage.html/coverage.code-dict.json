{"/home/travis/build/npmtest/node-npmtest-ejs-mate/test.js":"/* istanbul instrument in package npmtest_ejs_mate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ejs-mate/lib.npmtest_ejs_mate.js":"/* istanbul instrument in package npmtest_ejs_mate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ejs_mate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ejs_mate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ejs-mate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ejs-mate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ejs_mate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ejs_mate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ejs_mate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_ejs_mate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ejs_mate.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_ejs_mate.__dirname +\n                    '/lib.npmtest_ejs_mate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ejs-mate/node_modules/ejs-mate/index.js":"var ejs = require('ejs')\n  , fs = require('fs')\n  , path = require('path')\n  , exists = fs.existsSync || path.existsSync\n  , resolve = path.resolve\n  , extname = path.extname\n  , dirname = path.dirname\n  , join = path.join\n  , basename = path.basename;\n\n/**\n * Express 3.x Layout & Partial support for EJS.\n *\n * The `partial` feature from Express 2.x is back as a template engine,\n * along with support for `layout` and `block/script/stylesheet`.\n *\n *\n * Example index.ejs:\n *\n *   <% layout('boilerplate') %>\n *   <h1>I am the <%=what%> template</h1>\n *   <% script('foo.js') %>\n *\n *\n * Example boilerplate.ejs:\n *\n *   <html>\n *     <head>\n *       <title>It's <%=who%></title>\n *       <%-scripts%>\n *     </head>\n *     <body><%-body%></body>\n *   </html>\n *\n *\n * Sample app:\n *\n *    var express = require('express')\n *      , app = express();\n *\n *    // use ejs-locals for all ejs templates:\n *    app.engine('ejs', require('ejs-locals'));\n *\n *    // render 'index' into 'boilerplate':\n *    app.get('/',function(req,res,next){\n *      res.render('index', { what: 'best', who: 'me' });\n *    });\n *\n *    app.listen(3000);\n *\n * Example output for GET /:\n *\n *   <html>\n *     <head>\n *       <title>It's me</title>\n *       <script src=\"foo.js\"></script>\n *     </head>\n *     <body><h1>I am the best template</h1></body>\n *   </html>\n *\n */\n\nfunction compile(file, options, cb) {\n\n  // Express used to set options.locals for us, but now we do it ourselves\n  // (EJS does some __proto__ magic to expose these funcs/values in the template)\n  if (!options.locals) {\n    options.locals = {};\n  }\n\n  if (!options.locals.blocks) {\n    // one set of blocks no matter how often we recurse\n    var blocks = {};\n    options.locals.blocks = blocks;\n    options.locals.block = block.bind(blocks);\n  }\n\n  // override locals for layout/partial bound to current options\n  options.locals.layout  = layout.bind(options);\n  options.locals.partial = partial.bind(options);\n\n  try {\n    var fn = ejs.compile(file, options)\n    cb(null, fn.toString());\n  } catch(ex) {\n    cb(ex);\n  }\n}\n\nfunction renderFile(file, options, fn){\n\n  // Express used to set options.locals for us, but now we do it ourselves\n  // (EJS does some __proto__ magic to expose these funcs/values in the template)\n  if (!options.locals) {\n    options.locals = {};\n  }\n\n  if (!options.locals.blocks) {\n    // one set of blocks no matter how often we recurse\n    var blocks = {};\n    options.locals.blocks = blocks;\n    options.locals.block = block.bind(blocks);\n  }\n\n  // override locals for layout/partial bound to current options\n  options.locals.layout  = layout.bind(options);\n  options.locals.partial = partial.bind(options);\n\n  ejs.renderFile(file, options, function(err, html) {\n    if (err) {\n      return fn(err,html);\n    }\n\n    var layout = options.locals._layoutFile;\n\n    // for backward-compatibility, allow options to\n    // set a default layout file for the view or the app\n    // (NB:- not called `layout` any more so it doesn't\n    // conflict with the layout() function)\n    if (layout === undefined) {\n      layout = options._layoutFile;\n    }\n\n    if (layout) {\n\n      // use default extension\n      var engine = options.settings['view engine'] || 'ejs',\n          desiredExt = '.'+engine;\n\n      // apply default layout if only \"true\" was set\n      if (layout === true) {\n        layout = path.sep + 'layout' + desiredExt;\n      }\n      if (extname(layout) !== desiredExt) {\n        layout += desiredExt;\n      }\n\n      // clear to make sure we don't recurse forever (layouts can be nested)\n      delete options.locals._layoutFile;\n      delete options._layoutFile;\n      // make sure caching works inside ejs.renderFile/render\n      delete options.filename;\n\n      if (layout.length > 0) {\n        var views = options.settings.views;\n        var l = layout;\n\n        if (!Array.isArray(views)) {\n          views = [views];\n        }\n\n        for (var i = 0; i < views.length; i++) {\n          layout = join(views[i], l);\n\n          // use the first found layout\n          if (exists(layout)) {\n            break;\n          }\n        }\n      }\n\n      // now recurse and use the current result as `body` in the layout:\n      options.locals.body = html;\n      renderFile(layout, options, fn);\n    } else {\n      // no layout, just do the default:\n      fn(null, html);\n    }\n  });\n\n};\n\n/**\n * Memory cache for resolved object names.\n */\n\nvar cache = {};\n\n/**\n * Resolve partial object name from the view path.\n *\n * Examples:\n *\n *   \"user.ejs\" becomes \"user\"\n *   \"forum thread.ejs\" becomes \"forumThread\"\n *   \"forum/thread/post.ejs\" becomes \"post\"\n *   \"blog-post.ejs\" becomes \"blogPost\"\n *\n * @return {String}\n * @api private\n */\n\nfunction resolveObjectName(view){\n  return cache[view] || (cache[view] = view\n    .split('/')\n    .slice(-1)[0]\n    .split('.')[0]\n    .replace(/^_/, '')\n    .replace(/[^a-zA-Z0-9 ]+/g, ' ')\n    .split(/ +/).map(function(word, i){\n      return i ? word[0].toUpperCase() + word.substr(1) : word;\n    }).join(''));\n}\n\n/**\n * Lookup partial path from base path of current template:\n *\n *   - partial `_<name>`\n *   - any `<name>/index`\n *   - non-layout `../<name>/index`\n *   - any `<root>/<name>`\n *   - partial `<root>/_<name>`\n *\n * Options:\n *\n *   - `cache` store the resolved path for the view, to avoid disk I/O\n *\n * @param {String} root, full base path of calling template\n * @param {String} partial, name of the partial to lookup (can be a relative path)\n * @param {Object} options, for `options.cache` behavior\n * @return {String}\n * @api private\n */\n\nfunction lookup(root, partial, options){\n\n  var engine = options.settings['view engine'] || 'ejs'\n    , desiredExt = '.' + engine\n    , ext = extname(partial) || desiredExt\n    , key = [ root, partial, ext ].join('-')\n    , partialPath = partial;\n\n  if (options.cache && cache[key]) return cache[key];\n\n  // Make sure we use dirname in case of relative partials\n  // ex: for partial('../user') look for /path/to/root/../user.ejs\n  var dir = dirname(partial)\n    , base = basename(partial, ext);\n\n  // _ prefix takes precedence over the direct path\n  // ex: for partial('user') look for /root/_user.ejs\n  partial = resolve(root, dir,'_'+base+ext);\n  if( exists(partial) ) return options.cache ? cache[key] = partial : partial;\n\n  // Try the direct path\n  // ex: for partial('user') look for /root/user.ejs\n  partial = resolve(root, dir, base+ext);\n  if( exists(partial) ) return options.cache ? cache[key] = partial : partial;\n\n  // Try index\n  // ex: for partial('user') look for /root/user/index.ejs\n  partial = resolve(root, dir, base, 'index'+ext);\n  if( exists(partial) ) return options.cache ? cache[key] = partial : partial;\n\n  // Try relative to the app views\n  if (!options._isRelativeToViews) {\n    var views = options.settings.views;\n    options._isRelativeToViews = true;\n\n    if (!Array.isArray(views)) {\n      views = [views];\n    }\n\n    for (var i = 0; i < views.length; i++) {\n      partial = lookup(views[i], partialPath, options);\n\n      if (partial) {\n        // reset state for when the partial has a partial lookup of its own\n        options._isRelativeToViews = false;\n\n        return partial;\n      }\n    }\n  }\n\n  // FIXME:\n  // * there are other path types that Express 2.0 used to support but\n  //   the structure of the lookup involved View class methods that we\n  //   don't have access to any more\n  // * we have no tests for finding partials that aren't relative to\n  //   the calling view\n\n  return null;\n}\n\n\n/**\n * Render `view` partial with the given `options`. Optionally a\n * callback `fn(err, str)` may be passed instead of writing to\n * the socket.\n *\n * Options:\n *\n *   - `object` Single object with name derived from the view (unless `as` is present)\n *\n *   - `as` Variable name for each `collection` value, defaults to the view name.\n *     * as: 'something' will add the `something` local variable\n *     * as: this will use the collection value as the template context\n *     * as: global will merge the collection value's properties with `locals`\n *\n *   - `collection` Array of objects, the name is derived from the view name itself.\n *     For example _video.html_ will have a object _video_ available to it.\n *\n * @param  {String} view\n * @param  {Object|Array} options, collection or object\n * @return {String}\n * @api private\n */\n\nfunction partial(view, options){\n\n  var collection\n    , object\n    , locals\n    , name;\n\n  // parse options\n  if( options ){\n    // collection\n    if( options.collection ){\n      collection = options.collection;\n      delete options.collection;\n    } else if( 'length' in options ){\n      collection = options;\n      options = {};\n    }\n\n    // locals\n    if( options.locals ){\n      locals = options.locals;\n      delete options.locals;\n    }\n\n    // object\n    if( 'Object' != options.constructor.name ){\n      object = options;\n      options = {};\n    } else if( options.object !== undefined ){\n      object = options.object;\n      delete options.object;\n    }\n  } else {\n    options = {};\n  }\n\n  // merge locals into options\n  if( locals )\n    options.__proto__ = locals;\n\n  // merge app locals into options\n  for(var k in this)\n    options[k] = options[k] || this[k];\n\n  // extract object name from view\n  name = options.as || resolveObjectName(view);\n\n  // find view, relative to this filename\n  // (FIXME: filename is set by ejs engine, other engines may need more help)\n  var root = dirname(options.filename)\n    , file = lookup(root, view, options)\n    , key = file + ':string';\n  if( !file )\n    throw new Error('Could not find partial ' + view);\n\n  // read view\n  var source = options.cache\n    ? cache[key] || (cache[key] = fs.readFileSync(file, 'utf8'))\n    : fs.readFileSync(file, 'utf8');\n\n  options.filename = file;\n\n  // re-bind partial for relative partial paths\n  options.partial = partial.bind(options);\n\n  // render partial\n  function render(){\n    if (object) {\n      if ('string' == typeof name) {\n        options[name] = object;\n      } else if (name === global) {\n        // wtf?\n        // merge(options, object);\n      }\n    }\n    // TODO Support other templates (but it's sync now...)\n    var html = ejs.render(source, options);\n    return html;\n  }\n\n  // Collection support\n  if (collection) {\n    var len = collection.length\n      , buf = ''\n      , keys\n      , prop\n      , val\n      , i;\n\n    if ('number' == typeof len || Array.isArray(collection)) {\n      options.collectionLength = len;\n      for (i = 0; i < len; ++i) {\n        val = collection[i];\n        options.firstInCollection = i === 0;\n        options.indexInCollection = i;\n        options.lastInCollection = i === len - 1;\n        object = val;\n        buf += render();\n      }\n    } else {\n      keys = Object.keys(collection);\n      len = keys.length;\n      options.collectionLength = len;\n      options.collectionKeys = keys;\n      for (i = 0; i < len; ++i) {\n        prop = keys[i];\n        val = collection[prop];\n        options.keyInCollection = prop;\n        options.firstInCollection = i === 0;\n        options.indexInCollection = i;\n        options.lastInCollection = i === len - 1;\n        object = val;\n        buf += render();\n      }\n    }\n\n    return buf;\n  } else {\n    return render();\n  }\n}\n\n/**\n * Apply the given `view` as the layout for the current template,\n * using the current options/locals. The current template will be\n * supplied to the given `view` as `body`, along with any `blocks`\n * added by child templates.\n *\n * `options` are bound  to `this` in renderFile, you just call\n * `layout('myview')`\n *\n * @param  {String} view\n * @api private\n */\nfunction layout(view){\n  this.locals._layoutFile = view;\n}\n\n\nfunction Block() {\n  this.html = [];\n}\nBlock.prototype = {\n  toString: function() {\n    return this.html.join('\\n');\n  },\n  append: function(more) {\n    this.html.push(more);\n  },\n  prepend: function(more) {\n    this.html.unshift(more);\n  },\n  replace: function(instead) {\n    this.html = [ instead ];\n  }\n};\n\n/**\n * Return the block with the given name, create it if necessary.\n * Optionally append the given html to the block.\n *\n * The returned Block can append, prepend or replace the block,\n * as well as render it when included in a parent template.\n *\n * @param {String} name\n * @param {String} html\n * @return {Block}\n * @api private\n */\nfunction block(name, html) {\n// bound to the blocks object in renderFile\n  var blk = this[name];\n  if (!blk) {\n// always create, so if we request a\n// non-existent block we'll get a new one\n    blk = this[name] = new Block();\n  }\n  if (html) {\n    blk.append(html);\n  }\n  return blk;\n}\n\nrenderFile.compile = compile;\nrenderFile.partial = partial;\nrenderFile.block = block;\nrenderFile.layout = layout;\n\nmodule.exports = renderFile;\n"}